{"name":"Appium","tagline":"\"Selenium for Apps\" (Test automate native or hybrid iOS apps with UIAutomation and Selenium WebDriver.)","body":"Appium\r\n=========\r\n\r\nAppium is a test automation tool for use with native and hybrid iOS applications. It uses the webdriver JSON  wire protocol to drive Apple's UIAutomation. Appium is based on [Dan Cuellar's](http://github.com/penguinho) work on iOS Auto.\r\n\r\nAppium uses the [Bottle micro web-framework](http://www.bottlepy.org), and has the goal of working with all off the shelf Selenium client libraries.\r\n\r\nThere are two big benefits to testing with Appium:\r\n\r\n1: Appium uses Apple's UIAutomation library under the hood to perform the automation, which means you do not have to recompile your app or modify in any way to be able to test automate it.\r\n\r\n2: With Appium, you are able to write your test in your choice of programming language, using the Selenium WebDriver API and language-specific client libraries. If you only used UIAutomation, you would be required to write tests in JavaScript, and only run the tests through the Instruments application. With Appium, you can test your native iOS app with any language, and with your preferred dev tools.\r\n\r\nQuick Start\r\n-----------\r\n\r\nTo get started, clone the repo:<br />\r\n`git clone git://github.com/hugs/appium`\r\n\r\nNext, change into the 'appium' directory, and install dependencies:<br />\r\n`pip install -r requirements.txt`\r\n\r\nTo avoid a security dialog that can appear when launching your iOS app, you need to modify your /etc/authorization file. You can do this by settings the element following &lt;allow-root&gt; under &lt;key&gt;system.privilege.taskport&lt;/key&gt; to &lt;true/&gt; or by running the supplied python script (at your own risk)<br />\r\n`sudo python authorize.py`<br />\r\n\r\nTo launch an interpreter for sending raw UIAutomation javascript commands run:<br />\r\nFor the Simulator:<br />\r\n`python appium.py \"path_to_your_ios_.app\"` <br />\r\nFor a Device:<br />\r\n`python appium.py com.yourApps.BundleID -U <DEVICE_UDID>` <br />\r\n\r\nTo launch a webdriver-compatible server, run:<br />\r\nFor the Simulator:<br />\r\n`python server.py \"path_to_your_ios_.app\"` <br />\r\nFor a Device:<br />\r\n`python server.py com.yourApps.BundleID -U <DEVICE_UDID>` <br />\r\n\r\nTests can be written using raw javascript or webdriver.\r\n\r\nAn example of the raw javascript approach lives in `sample-code/js-test.py`\r\nTo run the test you must build the sample app (`sample-code/apps/TestApp/TestApp.xcodeproj`) in Xcode.\r\nYou can find the compiled app using spotlight from the command line. `mdfind -name TestApp.app`\r\nUse that path to run the sample test `python js-test.py \"/path/to/sample.app\"`\r\n\r\nAn example of the webdriver approach lives in `sample-code/webdriver-test.py`\r\nCompile and find the app as you did in the previous example and then launch the webdriver server. `python server.py \"/path/to/sample.app\"`\r\nNow you can run a test against that server. `python webdriver-test.py`\r\n\r\nUsing with a <a href=\"http://bitbeam.org\">Bitbeambot</a>\r\n-----------\r\n\r\n1. Connect the bitbeambot and place a connected iPad beneath it\r\n2. Build and install the calibration app in appium/robot/RobotCalibration/RobotCalibration/xcodeproj to the iPad\r\n2. Run the calibration script `python appium/robot/bitbeambot-d2/calibrate.py UDID /dev/tty.robot_usb_handle`\r\n3. Launch a webdriver server with the -b an d-c flags set <br />`python server.py -u UDID -b /dev/tty.robot_usb_handle -c /path/to/appium/robot/bitbeambot-d2/calibration.pickle Your.Bundle.Identifier`\r\n4. Now Appium will send tap actions to the bitbeambot instead of through UIAutomation\r\n\r\nContributing\r\n------------\r\n\r\nFork the project, make a change, and send a pull request! \r\n\r\nMailing List\r\n-----------\r\n\r\n<a href=\"https://groups.google.com/d/forum/appium-discuss\">Discussion Group</a>","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}